##################################
# Generated by Log Parser Studio #
##################################

#Name: EVENTS: Count Application Log Entries
#Log Type: EVTLOG
#Generated: 6/6/2013 1:09:06 AM

Param(
    [parameter(Mandatory=$false,ValueFromPipeline=$true)]
    [Bool]$AutoOpen,
	[parameter(Mandatory=$false,ValueFromPipeline=$true)]
    [String]$OutFile,
	[parameter(Mandatory=$false,ValueFromPipeline=$true)]
    [Bool]$IgnoreInParams,
	[parameter(Mandatory=$false,ValueFromPipeline=$true)]
    [Bool]$IgnoreOutParams) 
	
#DEMO: Set auto open to true for this sample script
$AutoOpen = $true;

$Error.Clear()
$DefaultFolder=[Environment]::GetFolderPath("MyDocuments")
$Destination = "EVENTS- Count Application Log Entries.CSV"
$Destination = $DefaultFolder + "\" + $Destination


if($OutFile -ne [String]::Empty)
{
	$OutFileType = [System.IO.Path]::GetExtension($OutFile.ToUpper())
	$OriginalFileType = [System.IO.Path]::GetExtension($Destination.ToUpper())
	if($OutFileType -ne $OriginalFileType)
	{
		Write-Host "You have chosen" $OutFileType "as the output, but this script was originally generated as" $OriginalFileType -ForegroundColor Red
		Write-Host "Either change -OutFile to" $OriginalFileType "or generate the script again with the output as" $OutFileType  -ForegroundColor Red
		Write-Host "You can also modify the OutputFormat variable in this script to match the correct Log Parser 2.2 COM output format." -ForegroundColor Red
		[System.Environment]::NewLine
		return
	}
	else
	{
		if($true -ne $OutFile.Contains("\"))
		{
		  $Destination = $DefaultFolder + "\" + $OutFile
		}
		else
		{
		  $Destination = $OutFile
		}
	}
}

$LogQuery = New-Object -ComObject "MSUtil.LogQuery"
$InputFormat = New-Object -ComObject "MSUtil.LogQuery.EventLogInputFormat"
$OutputFormat = New-Object -ComObject "MSUtil.LogQuery.CSVOutputFormat"

if($IgnoreInParams-eq $false){
     $InputFormat.fullText=1
     $InputFormat.resolveSIDs=0
     $InputFormat.formatMsg=1
     $InputFormat.msgErrorMode="MSG"
     $InputFormat.fullEventCode=0
     $InputFormat.direction="FW"
     $InputFormat.stringsSep="|"
     $InputFormat.binaryFormat="PRINT"
     $InputFormat.ignoreMessageErrors=1
}

if($IgnoreOutParams -eq $false){
     $OutputFormat.Headers="AUTO"
     $OutputFormat.oDQuotes="AUTO"
     $OutputFormat.tabs="OFF"
     $OutputFormat.oTsFormat="yyyy-MM-dd hh:mm:ss"
     $OutputFormat.oCodepage=0
     $OutputFormat.fileMode=1
}
Write-Progress -Activity "Executing query, please wait..."  -Status " "

$SQLQuery = "SELECT SourceName, BIT_AND(EventID, 0x3fffffff) as EventID, EventTypeName, COUNT(*) As Entries  INTO '" + $Destination + "' FROM  Application GROUP BY SourceName, EventID, EventTypeName ORDER BY Entries DESC "
$rtnVal = $LogQuery.ExecuteBatch($SQLQuery, $InputFormat, $OutputFormat);
$OutputFormat = $null;
$InputFormat = $null;
$LogQuery = $null;

if($AutoOpen)
{
	try
	{
		Start-Process($Destination)
	}
	catch
	{
		Write-Host $_.Exception.Message  -ForegroundColor Red
		Write-Host $_.Exception.GetType().FullName  -ForegroundColor Red
		Write-Host "NOTE: No output file will be created if the query returned zero records!"  -ForegroundColor Gray
	}	
}